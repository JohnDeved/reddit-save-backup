name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest
    environment: copilot

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JavaScript dependencies
        run: npm ci

      - name: Setup environment variables
        run: |
          echo "CLIENT_ID=${{ vars.CLIENT_ID || secrets.CLIENT_ID }}" >> $GITHUB_ENV
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "REDDIT_USERNAME=${{ vars.REDDIT_USERNAME || secrets.REDDIT_USERNAME }}" >> $GITHUB_ENV
          echo "REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }}" >> $GITHUB_ENV
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "CLIENT_ID=${{ vars.CLIENT_ID || secrets.CLIENT_ID }}" > .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "REDDIT_USERNAME=${{ vars.REDDIT_USERNAME || secrets.REDDIT_USERNAME }}" >> .env
          echo "REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }}" >> .env
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env

      - name: Verify environment setup
        run: |
          echo "Environment variables set:"
          echo "CLIENT_ID: ${CLIENT_ID:0:5}***"
          echo "CLIENT_SECRET: ${CLIENT_SECRET:0:5}***"
          echo "REDDIT_USERNAME: ${REDDIT_USERNAME:0:5}***"
          echo "REDDIT_PASSWORD: ${REDDIT_PASSWORD:0:3}***"
          echo "DISCORD_TOKEN: ${DISCORD_TOKEN:0:5}***"
          echo ".env file created successfully"